#include <iostream>
#include <string>
#include <tchar.h>

int main()
{
	_tsetlocale(LC_ALL, _T("portuguese"));
	bool bFezSol, bCarroPronto, bSalarioDepositado;
	bool bAcesso;

	//Declarando strings (classes)...
	std::string SenhaDeAcesso = "cmaismais";
	std::string SenhaDigitada;

	std::cout << "Digite a senha de acesso: ";
	std::cin >> SenhaDigitada;

	/*Se a senha digitada pelo usuário, e armazenada na variável 'SenhaDigitada"
	for igual a senha de acesso, as intruções após o 'if' serão executadas, pois
	a condição foi verdadeira 'true', ok?! */
	if (SenhaDigitada == SenhaDeAcesso)
	{
		std::cout << "\nAcesso Permitido!" << "\n";
		/*aqui, aproveitamos para indicar que o acesso foi concedido
		  através de outra variável booleana 'bAcesso'! */
		bAcesso = true;
		//system("PAUSE");
	}
		/* Se a condição for 'falsa', então as instruções do else serão executadas*/
	else
	{
		std::cout << "\n Acesso Negado!!!" << "\n";
		system("PAUSE");
		exit(0); //sai do programa e força o fechamento da aplicação!
	}
	bFezSol = false;
	bCarroPronto = false;
	bSalarioDepositado = false;
	//Aqui podemos deixar apenas a variável;
	//Não é necessário "==", pois será buscado o valor de bAcesso, e ficará assim:
	//if (true) ou if(false)
	//if (bAcesso == true)
	if (bAcesso)
	{
		if (bFezSol || bCarroPronto || bSalarioDepositado)
		{
			std::cout << "\nVai dar praia!!!" << std::endl;
		}
		//Aqui será executado se a condição do if falhar e se
		//"bSalarioDepositado" for false
		//Da mesma forma aqui, tirar "== false"...
		//else if (bSalarioDepositado == false)
		//Como bSalarioDepositado é falso "!(não)" Falso, dará "True", e aí entra no "else if", ok?!
		else if (!bSalarioDepositado)
		{
			std::cout << "Não vai rolar praia, e o salário também não foi depositado!!!" << "\n";
		}
	}

	system("PAUSE");
}
